{"version":3,"file":"static/js/643.994f0b6b.chunk.js","mappings":"8KA4BA,IAzBgB,SAAAA,GACd,IAAQC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SACf,OACE,UAAC,KAAG,CAACC,EAAG,CAAC,IAAK,IAAK,KAAMC,EAAE,OAAM,WAC/B,SAAC,IAAO,CACNC,GAAG,KACHC,WAAW,iCACXC,OAAO,OACPC,SAAU,CAAEC,KAAM,OAAQC,GAAI,OAAQC,GAAI,QAAS,SAElDV,IAEFC,IAGP,C,yJCHMU,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,KAAMF,EAAAA,KACHG,QACC,yHACA,0IAEDC,SAAS,YAEZC,MAAOL,EAAAA,KAAYM,KAAK,CACtBJ,KAAM,QACNK,OAAQ,CAAEC,EAAG,OAAQC,EAAG,OACxBC,QAAS,oBACTJ,KAAM,SAAAK,GACJ,MAAO,2BAA2BL,KAAKK,EACzC,IAGFC,SAAUZ,EAAAA,KACPa,IAAI,EAAG,cACPC,IAAI,GAAI,eACRV,SAAS,cAiGd,UA9FiB,WACf,IAAMW,GAAWC,EAAAA,EAAAA,MAEjB,OACE,+BACE,SAAC,IAAO,WACN,SAAC,KAAM,CACLC,cAAe,CACbf,KAAK,GACLG,MAAM,GACNO,SAAU,IAEZM,iBAAkBnB,EAClBoB,SAAU,SAACC,EAAQC,GACjBA,EAAQC,eAAc,GACtBD,EAAQE,YACR,IAAMC,EAAO,CACXtB,KAAMkB,EAAOlB,KAAKuB,OAClBpB,MAAOe,EAAOf,MAAMoB,OACpBb,SAAUQ,EAAOR,SAASa,QAE5BV,GAASW,EAAAA,EAAAA,IAAgBF,GAC3B,EAAE,SAED,SAAArC,GAAK,OACJ,UAAC,KAAI,YACH,UAAC,IAAM,CACLwC,QAAS,EACTC,MAAM,aACNtC,EAAG,CAAC,IAAK,IAAK,KACduC,GAAG,OAAM,WAET,UAAC,KAAW,YACV,SAAC,IAAS,CAACC,QAAQ,OAAM,mBACzB,SAAC,EAAAC,EAAK,CACJvC,GAAIwC,EAAAA,GACJC,QAAQ,UACRC,iBAAiB,WACjBC,KAAK,OACLjC,KAAK,SAENf,EAAMiD,OAAOlC,OACZ,SAAC,KAAgB,CAACmC,GAAG,WAAU,SAC5BlD,EAAMiD,OAAOlC,WAKpB,UAAC,KAAW,YACV,SAAC,IAAS,CAAC4B,QAAQ,QAAO,oBAC1B,SAAC,EAAAC,EAAK,CACJvC,GAAIwC,EAAAA,GACJC,QAAQ,UACRC,iBAAiB,WACjBC,KAAK,QACLjC,KAAK,UAENf,EAAMiD,OAAO/B,QACZ,SAAC,KAAgB,CAACgC,GAAG,WAAU,SAC5BlD,EAAMiD,OAAO/B,YAIpB,UAAC,KAAW,YACV,SAAC,IAAS,CAACyB,QAAQ,WAAU,uBAC7B,SAAC,EAAAC,EAAK,CACJvC,GAAIwC,EAAAA,GACJC,QAAQ,UACRC,iBAAiB,WACjBC,KAAK,OACLjC,KAAK,aAENf,EAAMiD,OAAOxB,WACZ,SAAC,KAAgB,CAACyB,GAAG,WAAU,SAC5BlD,EAAMiD,OAAOxB,kBAKtB,SAAC,IAAM,CACLuB,KAAK,SACLG,YAAY,OACZC,UAAU,OACVC,OAAQ,CAAEC,GAAI,OAAQC,MAAO,SAAU,wBAIpC,OAMnB,C","sources":["components/Section/Section.jsx","pages/Register/Register.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport { Heading, Box } from '@chakra-ui/react';\r\n\r\nconst Section = props => {\r\n  const { title, children } = props;\r\n  return (\r\n    <Box w={[320, 420, 800]} p=\"20px\">\r\n      <Heading\r\n        as=\"h2\"\r\n        bgGradient=\"linear(to-l, #4FD1C5, #234E52)\"\r\n        bgClip=\"text\"\r\n        fontSize={{ base: '24px', md: '28px', lg: '36px' }}\r\n      >\r\n        {title}\r\n      </Heading>\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.element),\r\n    PropTypes.element,\r\n  ]),\r\n};\r\n\r\nexport default Section;\r\n","import { useDispatch } from 'react-redux';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  Button,\r\n  Input,\r\n  VStack,\r\n  FormControl,\r\n  FormLabel,\r\n  FormErrorMessage,\r\n} from '@chakra-ui/react';\r\nimport { registerNewUser } from 'redux/operationPhonebook';\r\n\r\nimport Section from 'components/Section/Section';\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .matches(\r\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\r\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n    )\r\n    .required('Required'),\r\n\r\n  email: Yup.mixed().test({\r\n    name: 'email',\r\n    params: { a: 'test', b: 'qwe' },\r\n    message: 'It is not a email',\r\n    test: value => {\r\n      return /\\w+[^\\s]\\w+@\\w+\\.\\w{1,5}/.test(value);\r\n    },\r\n  }),\r\n\r\n  password: Yup.string()\r\n    .min(7, 'Must min 7')\r\n    .max(25, 'Must max 25')\r\n    .required('Required'),\r\n});\r\n\r\nconst Register = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <Section>\r\n        <Formik\r\n          initialValues={{\r\n            name: ``,\r\n            email: ``,\r\n            password: '',\r\n          }}\r\n          validationSchema={SignupSchema}\r\n          onSubmit={(values, actions) => {\r\n            actions.setSubmitting(false);\r\n            actions.resetForm();\r\n            const user = {\r\n              name: values.name.trim(),\r\n              email: values.email.trim(),\r\n              password: values.password.trim(),\r\n            };\r\n            dispatch(registerNewUser(user));\r\n          }}\r\n        >\r\n          {props => (\r\n            <Form>\r\n              <VStack\r\n                spacing={6}\r\n                align=\"flex-start\"\r\n                w={[250, 400, 600]}\r\n                mx=\"auto\"\r\n              >\r\n                <FormControl>\r\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\r\n                  <Input\r\n                    as={Field}\r\n                    variant=\"outline\"\r\n                    focusBorderColor=\"teal.400\"\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                  />\r\n                  {props.errors.name && (\r\n                    <FormErrorMessage id=\"feedback\">\r\n                      {props.errors.name}\r\n                    </FormErrorMessage>\r\n                  )}\r\n                </FormControl>\r\n\r\n                <FormControl>\r\n                  <FormLabel htmlFor=\"email\">Email</FormLabel>\r\n                  <Input\r\n                    as={Field}\r\n                    variant=\"outline\"\r\n                    focusBorderColor=\"teal.400\"\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                  />\r\n                  {props.errors.email && (\r\n                    <FormErrorMessage id=\"feedback\">\r\n                      {props.errors.email}\r\n                    </FormErrorMessage>\r\n                  )}\r\n                </FormControl>\r\n                <FormControl>\r\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\r\n                  <Input\r\n                    as={Field}\r\n                    variant=\"outline\"\r\n                    focusBorderColor=\"teal.400\"\r\n                    type=\"text\"\r\n                    name=\"password\"\r\n                  />\r\n                  {props.errors.password && (\r\n                    <FormErrorMessage id=\"feedback\">\r\n                      {props.errors.password}\r\n                    </FormErrorMessage>\r\n                  )}\r\n                </FormControl>\r\n              </VStack>\r\n              <Button\r\n                type=\"submit\"\r\n                colorScheme=\"teal\"\r\n                marginTop=\"30px\"\r\n                _hover={{ bg: 'gray', color: 'white' }}\r\n              >\r\n                Register\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Section>\r\n    </>\r\n  );\r\n};\r\nexport default Register;\r\n"],"names":["props","title","children","w","p","as","bgGradient","bgClip","fontSize","base","md","lg","SignupSchema","Yup","shape","name","matches","required","email","test","params","a","b","message","value","password","min","max","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","setSubmitting","resetForm","user","trim","registerNewUser","spacing","align","mx","htmlFor","I","Field","variant","focusBorderColor","type","errors","id","colorScheme","marginTop","_hover","bg","color"],"sourceRoot":""}