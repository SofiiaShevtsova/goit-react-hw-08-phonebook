{"version":3,"file":"static/js/643.7d32e591.chunk.js","mappings":"8KAsBA,IAlBgB,SAAAA,GACd,IAAQC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SACf,OACE,UAAC,KAAG,YACF,SAAC,IAAO,CAACC,GAAG,KAAKC,KAAK,MAAK,SAAEH,IAC5BC,IAGP,C,yJCGMG,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,KAAMF,EAAAA,KACHG,QACC,yHACA,0IAEDC,SAAS,YAEZC,MAAOL,EAAAA,KAAYM,KAAK,CACtBJ,KAAM,QACNK,OAAQ,CAAEC,EAAG,OAAQC,EAAG,OACxBC,QAAS,oBACTJ,KAAM,SAAAK,GACJ,MAAO,2BAA2BL,KAAKK,EACzC,IAGFC,SAAUZ,EAAAA,KACPa,IAAI,EAAG,cACPC,IAAI,GAAI,eACRV,SAAS,cA2Fd,UAxFiB,WACf,IAAMW,GAAWC,EAAAA,EAAAA,MAEjB,OACE,+BACE,SAAC,IAAO,CAACrB,MAAO,WAAW,UACzB,SAAC,KAAM,CACLsB,cAAe,CACbf,KAAK,GACLG,MAAM,GACNO,SAAU,IAEZM,iBAAkBnB,EAClBoB,SAAU,SAACC,EAAQC,GACjBA,EAAQC,eAAc,GACtBD,EAAQE,YACR,IAAMC,EAAO,CACXtB,KAAMkB,EAAOlB,KAAKuB,OAClBpB,MAAOe,EAAOf,MAAMoB,OACpBb,SAAUQ,EAAOR,SAASa,QAE5BV,GAASW,EAAAA,EAAAA,IAAgBF,GAC3B,EAAE,SAED,SAAA9B,GAAK,OACJ,UAAC,KAAI,YACH,UAAC,IAAM,CAACiC,QAAS,EAAGC,MAAM,aAAaC,EAAE,QAAO,WAC9C,UAAC,KAAW,YACV,SAAC,IAAS,CAACC,QAAQ,OAAM,mBACzB,SAAC,EAAAC,EAAK,CACJlC,GAAImC,EAAAA,GACJC,QAAQ,UACRC,iBAAiB,WACjBC,KAAK,OACLjC,KAAK,SAENR,EAAM0C,OAAOlC,OACZ,SAAC,KAAgB,CAACmC,GAAG,WAAU,SAC5B3C,EAAM0C,OAAOlC,WAKpB,UAAC,KAAW,YACV,SAAC,IAAS,CAAC4B,QAAQ,QAAO,oBAC1B,SAAC,EAAAC,EAAK,CACJlC,GAAImC,EAAAA,GACJC,QAAQ,UACRC,iBAAiB,WACjBC,KAAK,QACLjC,KAAK,UAENR,EAAM0C,OAAO/B,QACZ,SAAC,KAAgB,CAACgC,GAAG,WAAU,SAC5B3C,EAAM0C,OAAO/B,YAIpB,UAAC,KAAW,YACV,SAAC,IAAS,CAACyB,QAAQ,WAAU,uBAC7B,SAAC,EAAAC,EAAK,CACJlC,GAAImC,EAAAA,GACJC,QAAQ,UACRC,iBAAiB,WACjBC,KAAK,OACLjC,KAAK,aAENR,EAAM0C,OAAOxB,WACZ,SAAC,KAAgB,CAACyB,GAAG,WAAU,SAC5B3C,EAAM0C,OAAOxB,kBAKtB,SAAC,IAAM,CACLuB,KAAK,SACLG,YAAY,OACZC,OAAQ,CAAEC,GAAI,OAAQC,MAAO,SAAU,wBAIpC,OAMnB,C","sources":["components/Section/Section.jsx","pages/Register/Register.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Heading, Box  } from '@chakra-ui/react';\n\n\nconst Section = props => {\n  const { title, children } = props;\n  return (\n    <Box>\n      <Heading as='h2' size='2xl'>{title}</Heading >\n      {children}\n    </Box>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.element),\n    PropTypes.element,\n  ]),\n};\n\nexport default Section;\n","import { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Button,\n  Input,\n  VStack,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n} from '@chakra-ui/react';\nimport { registerNewUser } from 'redux/operationPhonebook';\n\nimport Section from 'components/Section/Section';\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n\n  email: Yup.mixed().test({\n    name: 'email',\n    params: { a: 'test', b: 'qwe' },\n    message: 'It is not a email',\n    test: value => {\n      return /\\w+[^\\s]\\w+@\\w+\\.\\w{1,5}/.test(value);\n    },\n  }),\n\n  password: Yup.string()\n    .min(7, 'Must min 7')\n    .max(25, 'Must max 25')\n    .required('Required'),\n});\n\nconst Register = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Section title={'Register'}>\n        <Formik\n          initialValues={{\n            name: ``,\n            email: ``,\n            password: '',\n          }}\n          validationSchema={SignupSchema}\n          onSubmit={(values, actions) => {\n            actions.setSubmitting(false);\n            actions.resetForm();\n            const user = {\n              name: values.name.trim(),\n              email: values.email.trim(),\n              password: values.password.trim(),\n            };\n            dispatch(registerNewUser(user));\n          }}\n        >\n          {props => (\n            <Form>\n              <VStack spacing={6} align=\"flex-start\" w=\"400px\">\n                <FormControl>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Input\n                    as={Field}\n                    variant=\"outline\"\n                    focusBorderColor=\"teal.400\"\n                    type=\"text\"\n                    name=\"name\"\n                  />\n                  {props.errors.name && (\n                    <FormErrorMessage id=\"feedback\">\n                      {props.errors.name}\n                    </FormErrorMessage>\n                  )}\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel htmlFor=\"email\">Email</FormLabel>\n                  <Input\n                    as={Field}\n                    variant=\"outline\"\n                    focusBorderColor=\"teal.400\"\n                    type=\"email\"\n                    name=\"email\"\n                  />\n                  {props.errors.email && (\n                    <FormErrorMessage id=\"feedback\">\n                      {props.errors.email}\n                    </FormErrorMessage>\n                  )}\n                </FormControl>\n                <FormControl>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Input\n                    as={Field}\n                    variant=\"outline\"\n                    focusBorderColor=\"teal.400\"\n                    type=\"text\"\n                    name=\"password\"\n                  />\n                  {props.errors.password && (\n                    <FormErrorMessage id=\"feedback\">\n                      {props.errors.password}\n                    </FormErrorMessage>\n                  )}\n                </FormControl>\n              </VStack>\n              <Button\n                type=\"submit\"\n                colorScheme=\"teal\"\n                _hover={{ bg: 'gray', color: 'white' }}\n              >\n                Register\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Section>\n    </>\n  );\n};\nexport default Register;\n"],"names":["props","title","children","as","size","SignupSchema","Yup","shape","name","matches","required","email","test","params","a","b","message","value","password","min","max","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","setSubmitting","resetForm","user","trim","registerNewUser","spacing","align","w","htmlFor","I","Field","variant","focusBorderColor","type","errors","id","colorScheme","_hover","bg","color"],"sourceRoot":""}