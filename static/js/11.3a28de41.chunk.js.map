{"version":3,"file":"static/js/11.3a28de41.chunk.js","mappings":"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","sources":["components/ComponentStyles/PhonebookStyles.js","components/Section/Section.jsx","components/ContactsList/ContactsList.jsx","components/FormAddContact/FormAddContact.jsx","components/FilterContact/FilterContact.jsx","components/Loading/Loading.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\nimport photo from 'image/contact.jpg';\n\nconst StyleList = {\n  SectionContainer: styled.div`\n    width: 600px;\n    padding: 20px;\n    background-color: rgb(230, 154, 92);\n    font-size: 24px;\n    color: black;\n    font-weight: bold;\n  `,\n\n  SectionTitle: styled.h2`\n    font-size: 32px;\n    margin-bottom: 20px;\n    color: rgb(150, 50, 50);\n  `,\n\n  FormStyle: styled(Form)`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n  `,\n\n  FieldStyles: styled(Field)`\n    width: 50%;\n    font-size: 20px;\n    border-radius: 5px;\n    border: 2px solid brown;\n    background-color: bisque;\n    padding: 10px;\n  `,\n\n  BtnStyle: styled.button`\n    width: 30%;\n    font-size: 20px;\n    border-radius: 5px;\n    border: 2px solid brown;\n    background-color: rgb(240, 103, 69);\n    color: brown;\n    padding: 10px;\n    &:hover {\n      background-color: brown;\n      color: bisque;\n      font-weight: 600;\n    }\n  `,\n\n  ErrorMessageStyle: styled.div`\n    display: block;\n    color: red;\n    font-size: 16px;\n  `,\n\n  ListOfContactsStyle: styled.ul`\n    list-style: url('${photo}');\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: center;\n    gap: 10px;\n    margin-top: 30px;\n    padding-left: 50px;\n    font-size: 28px;\n    & > li {\n      padding-left: 10px;\n    }\n  `,\n\n  BtnDeleteContact: styled.button`\n    display: inline-block;\n    margin-left: 20px;\n    font-size: 16px;\n    border-radius: 5px;\n    border: 2px solid brown;\n    background-color: rgb(240, 103, 69);\n    color: brown;\n    padding: 5px;\n    position: relative;\n    top: -5px;\n    &:hover {\n      background-color: brown;\n      color: bisque;\n      font-weight: 600;\n    }\n  `,\n\n  IsEmptyList: styled.p`\n    display: block;\n    color: red;\n    font-size: 16px;\n    margin-top: 30px;\n  `,\n};\n\nexport default StyleList;\n","import PropTypes from 'prop-types';\nimport { Heading, Box  } from '@chakra-ui/react';\n\n\nconst Section = props => {\n  const { title, children } = props;\n  return (\n    <Box>\n      <Heading as='h2' size='2xl'>{title}</Heading >\n      {children}\n    </Box>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.element),\n    PropTypes.element,\n  ]),\n};\n\nexport default Section;\n","// import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux/es';\nimport { removeContact } from 'redux/operationPhonebook';\nimport StyleList from '../ComponentStyles/PhonebookStyles';\n\nconst { ListOfContactsStyle, BtnDeleteContact, IsEmptyList } = StyleList;\n\nconst ContactsList = props => {\n  const { contacts } = props;\n  return contacts.length > 0 ? (\n    <ListOfContactsStyle>\n      {contacts.map(elem => (\n        <Contact\n          name={elem.name}\n          phone={elem.number}\n          id={elem.id}\n          key={elem.id}\n        />\n      ))}\n    </ListOfContactsStyle>\n  ) : (\n    <>\n      <IsEmptyList>\"There is no contacts\"</IsEmptyList>\n    </>\n  );\n};\n\n// ContactsList.propTypes = {\n//   contacts: PropTypes.oneOfType([\n//     PropTypes.arrayOf(\n//       PropTypes.shape({\n//         name: PropTypes.string.isRequired,\n//         phone: PropTypes.string.isRequired,\n//         id: PropTypes.string.isRequired,\n//       }),\n//       PropTypes.array\n//     ),\n//   ]),\n// };\n\nconst Contact = props => {\n  const dispatch = useDispatch();\n\n  const contsctToRemove = event => {\n    dispatch(removeContact(event.target.attributes.id.nodeValue));\n  };\n\n  const { name, phone, id } = props;\n  return (\n    <li>\n      {name}: <span>{phone}</span>\n      <BtnDeleteContact type=\"button\" id={id} onClick={contsctToRemove}>\n        Delete\n      </BtnDeleteContact>\n    </li>\n  );\n};\n\n// Contact.propTypes = {\n//   name: PropTypes.string.isRequired,\n//   phone: PropTypes.string.isRequired,\n//   id: PropTypes.string.isRequired,\n// };\n\nexport default ContactsList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operationPhonebook';\n\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport StyleList from '../ComponentStyles/PhonebookStyles';\n\nconst { FormStyle, FieldStyles, BtnStyle, ErrorMessageStyle } = StyleList;\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n\n  number: Yup.mixed().test({\n    name: 'number',\n    message:\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n    test: value => {\n      return /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/.test(\n        value\n      );\n    },\n  }),\n});\n\nconst FormAddContact = props => {\n  const dispatch = useDispatch();\n  const contactsState = useSelector(state => state.phonebook.contacts);\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          name: ``,\n          number: ``,\n        }}\n        validationSchema={SignupSchema}\n        onSubmit={(values, actions) => {\n          actions.setSubmitting(false);\n          actions.resetForm();\n\n          if (contactsState.find(elem => elem.name === values.name.trim())) {\n            alert('You have this contacts');\n            return;\n          }\n          dispatch(\n            addContact({\n              name: values.name.trim(),\n              number: values.number.trim(),\n            })\n          );\n        }}\n      >\n        {props => (\n          <FormStyle>\n            <label htmlFor=\"name\">Name</label>\n            <FieldStyles type=\"text\" name=\"name\" />\n            {props.errors.name && (\n              <ErrorMessageStyle id=\"feedback\">\n                {props.errors.name}\n              </ErrorMessageStyle>\n            )}\n            <label htmlFor=\"number\">Number</label>\n            <FieldStyles type=\"tel\" name=\"number\" />\n            {props.errors.number && (\n              <ErrorMessageStyle id=\"feedback\">\n                {props.errors.number}\n              </ErrorMessageStyle>\n            )}\n\n            <BtnStyle type=\"submit\">Add contact</BtnStyle>\n          </FormStyle>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default FormAddContact;\n","// import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { findContact } from 'redux/phonebookSlice';\n\nimport { Formik } from 'formik';\nimport StyleList from '../ComponentStyles/PhonebookStyles';\n\nconst { FormStyle, FieldStyles } = StyleList;\n\nconst FilterContact = props => {\n  const findState = useSelector(state => state.phonebook.filter);\n  const dispatch = useDispatch();\n\n  const filterFun = event => {\n    dispatch(findContact(event.target.value.trim().toLowerCase()));\n  };\n  return (\n    <Formik\n      initialValues={{\n        filter: '',\n      }}\n      onSubmit={(values, actions) => {\n        actions.setSubmitting(false);\n      }}\n    >\n      <FormStyle>\n        <label htmlFor=\"filter\">Find contacts by name</label>\n        <FieldStyles\n          type=\"text\"\n          name=\"filter\"\n          onChange={filterFun}\n          value={findState}\n        />\n      </FormStyle>\n    </Formik>\n  );\n};\n\nexport default FilterContact;\n","const Loading = () => {\n  return <div>Loading...</div>;\n};\n\nexport default Loading;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/operationPhonebook';\n\nimport Section from 'components/Section/Section';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport FormAddContact from 'components/FormAddContact/FormAddContact';\nimport FilterContact from 'components/FilterContact/FilterContact';\nimport Loading from 'components/Loading/Loading';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n    const userState = useSelector(state => state.phonebook.user);\n\n\n  useEffect(() => {\n    if(userState)\n    {dispatch(getContacts());}\n  }, [dispatch, userState]);\n\n  const contactsState = useSelector(state => state.phonebook.contacts);\n  const filterContacts = useSelector(state => state.phonebook.filter);\n  const isLoading = useSelector(state => state.phonebook.isLoading);\n\n  const contactToFind = contactsState.filter(elem =>\n    elem.name.toLowerCase().includes(filterContacts)\n  );\n\n    return (    <><Section title={'Phonebook'}>\n        <FormAddContact />\n      </Section>\n      <Section title={'Contacts'}>\n        <FilterContact />\n        {isLoading ? <Loading /> : <ContactsList contacts={contactToFind} />}\n      </Section></>  \n)\n}\nexport default Contacts"],"names":["SectionContainer","styled","SectionTitle","FormStyle","Form","FieldStyles","Field","BtnStyle","ErrorMessageStyle","ListOfContactsStyle","BtnDeleteContact","IsEmptyList","props","title","children","as","size","StyleList","Contact","dispatch","useDispatch","name","phone","id","type","onClick","event","removeContact","target","attributes","nodeValue","contacts","length","map","elem","number","SignupSchema","Yup","shape","matches","required","test","message","value","contactsState","useSelector","state","phonebook","initialValues","validationSchema","onSubmit","values","actions","setSubmitting","resetForm","find","trim","alert","addContact","htmlFor","errors","findState","filter","onChange","findContact","toLowerCase","userState","user","useEffect","getContacts","filterContacts","isLoading","contactToFind","includes","Section"],"sourceRoot":""}