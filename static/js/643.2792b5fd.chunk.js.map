{"version":3,"file":"static/js/643.2792b5fd.chunk.js","mappings":"8KA4BA,IAzBgB,SAAAA,GACd,IAAQC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SACf,OACE,UAAC,KAAD,CAAKC,EAAG,CAAC,IAAK,IAAK,KAAMC,EAAE,OAA3B,WACE,SAAC,IAAD,CACEC,GAAG,KACHC,WAAW,iCACXC,OAAO,OACPC,SAAU,CAAEC,KAAM,OAAQC,GAAI,OAAQC,GAAI,QAJ5C,SAMGV,IAEFC,IAGN,C,yJCHKU,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,KAAMF,EAAAA,KACHG,QACC,yHACA,0IAEDC,SAAS,YAEZC,MAAOL,EAAAA,KAAYM,KAAK,CACtBJ,KAAM,QACNK,OAAQ,CAAEC,EAAG,OAAQC,EAAG,OACxBC,QAAS,oBACTJ,KAAM,SAAAK,GACJ,MAAO,2BAA2BL,KAAKK,EACxC,IAGHC,SAAUZ,EAAAA,KACPa,IAAI,EAAG,cACPC,IAAI,GAAI,eACRV,SAAS,cAiGd,UA9FiB,WACf,IAAMW,GAAWC,EAAAA,EAAAA,MAEjB,OACE,+BACE,SAAC,IAAD,WACE,SAAC,KAAD,CACEC,cAAe,CACbf,KAAK,GACLG,MAAM,GACNO,SAAU,IAEZM,iBAAkBnB,EAClBoB,SAAU,SAACC,EAAQC,GACjBA,EAAQC,eAAc,GACtBD,EAAQE,YACR,IAAMC,EAAO,CACXtB,KAAMkB,EAAOlB,KAAKuB,OAClBpB,MAAOe,EAAOf,MAAMoB,OACpBb,SAAUQ,EAAOR,SAASa,QAE5BV,GAASW,EAAAA,EAAAA,IAAgBF,GAC1B,EAhBH,SAkBG,SAAArC,GAAK,OACJ,UAAC,KAAD,YACE,UAAC,IAAD,CACEwC,QAAS,EACTC,MAAM,aACNtC,EAAG,CAAC,IAAK,IAAK,KACduC,GAAG,OAJL,WAME,UAAC,KAAD,YACE,SAAC,IAAD,CAAWC,QAAQ,OAAnB,mBACA,SAAC,EAAAC,EAAD,CACEvC,GAAIwC,EAAAA,GACJC,QAAQ,UACRC,iBAAiB,WACjBC,KAAK,OACLjC,KAAK,SAENf,EAAMiD,OAAOlC,OACZ,SAAC,KAAD,CAAkBmC,GAAG,WAArB,SACGlD,EAAMiD,OAAOlC,WAKpB,UAAC,KAAD,YACE,SAAC,IAAD,CAAW4B,QAAQ,QAAnB,oBACA,SAAC,EAAAC,EAAD,CACEvC,GAAIwC,EAAAA,GACJC,QAAQ,UACRC,iBAAiB,WACjBC,KAAK,QACLjC,KAAK,UAENf,EAAMiD,OAAO/B,QACZ,SAAC,KAAD,CAAkBgC,GAAG,WAArB,SACGlD,EAAMiD,OAAO/B,YAIpB,UAAC,KAAD,YACE,SAAC,IAAD,CAAWyB,QAAQ,WAAnB,uBACA,SAAC,EAAAC,EAAD,CACEvC,GAAIwC,EAAAA,GACJC,QAAQ,UACRC,iBAAiB,WACjBC,KAAK,OACLjC,KAAK,aAENf,EAAMiD,OAAOxB,WACZ,SAAC,KAAD,CAAkByB,GAAG,WAArB,SACGlD,EAAMiD,OAAOxB,kBAKtB,SAAC,IAAD,CACEuB,KAAK,SACLG,YAAY,OACZC,UAAU,OACVC,OAAQ,CAAEC,GAAI,OAAQC,MAAO,SAJ/B,wBAvDE,OAqEf,C","sources":["components/Section/Section.jsx","pages/Register/Register.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Heading, Box } from '@chakra-ui/react';\n\nconst Section = props => {\n  const { title, children } = props;\n  return (\n    <Box w={[320, 420, 800]} p=\"20px\">\n      <Heading\n        as=\"h2\"\n        bgGradient=\"linear(to-l, #4FD1C5, #234E52)\"\n        bgClip=\"text\"\n        fontSize={{ base: '24px', md: '28px', lg: '36px' }}\n      >\n        {title}\n      </Heading>\n      {children}\n    </Box>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.element),\n    PropTypes.element,\n  ]),\n};\n\nexport default Section;\n","import { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Button,\n  Input,\n  VStack,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n} from '@chakra-ui/react';\nimport { registerNewUser } from 'redux/operationPhonebook';\n\nimport Section from 'components/Section/Section';\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n\n  email: Yup.mixed().test({\n    name: 'email',\n    params: { a: 'test', b: 'qwe' },\n    message: 'It is not a email',\n    test: value => {\n      return /\\w+[^\\s]\\w+@\\w+\\.\\w{1,5}/.test(value);\n    },\n  }),\n\n  password: Yup.string()\n    .min(7, 'Must min 7')\n    .max(25, 'Must max 25')\n    .required('Required'),\n});\n\nconst Register = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Section>\n        <Formik\n          initialValues={{\n            name: ``,\n            email: ``,\n            password: '',\n          }}\n          validationSchema={SignupSchema}\n          onSubmit={(values, actions) => {\n            actions.setSubmitting(false);\n            actions.resetForm();\n            const user = {\n              name: values.name.trim(),\n              email: values.email.trim(),\n              password: values.password.trim(),\n            };\n            dispatch(registerNewUser(user));\n          }}\n        >\n          {props => (\n            <Form>\n              <VStack\n                spacing={6}\n                align=\"flex-start\"\n                w={[250, 400, 600]}\n                mx=\"auto\"\n              >\n                <FormControl>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Input\n                    as={Field}\n                    variant=\"outline\"\n                    focusBorderColor=\"teal.400\"\n                    type=\"text\"\n                    name=\"name\"\n                  />\n                  {props.errors.name && (\n                    <FormErrorMessage id=\"feedback\">\n                      {props.errors.name}\n                    </FormErrorMessage>\n                  )}\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel htmlFor=\"email\">Email</FormLabel>\n                  <Input\n                    as={Field}\n                    variant=\"outline\"\n                    focusBorderColor=\"teal.400\"\n                    type=\"email\"\n                    name=\"email\"\n                  />\n                  {props.errors.email && (\n                    <FormErrorMessage id=\"feedback\">\n                      {props.errors.email}\n                    </FormErrorMessage>\n                  )}\n                </FormControl>\n                <FormControl>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Input\n                    as={Field}\n                    variant=\"outline\"\n                    focusBorderColor=\"teal.400\"\n                    type=\"text\"\n                    name=\"password\"\n                  />\n                  {props.errors.password && (\n                    <FormErrorMessage id=\"feedback\">\n                      {props.errors.password}\n                    </FormErrorMessage>\n                  )}\n                </FormControl>\n              </VStack>\n              <Button\n                type=\"submit\"\n                colorScheme=\"teal\"\n                marginTop=\"30px\"\n                _hover={{ bg: 'gray', color: 'white' }}\n              >\n                Register\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Section>\n    </>\n  );\n};\nexport default Register;\n"],"names":["props","title","children","w","p","as","bgGradient","bgClip","fontSize","base","md","lg","SignupSchema","Yup","shape","name","matches","required","email","test","params","a","b","message","value","password","min","max","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","setSubmitting","resetForm","user","trim","registerNewUser","spacing","align","mx","htmlFor","I","Field","variant","focusBorderColor","type","errors","id","colorScheme","marginTop","_hover","bg","color"],"sourceRoot":""}