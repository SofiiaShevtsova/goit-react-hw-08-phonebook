{"version":3,"file":"static/js/374.ed2407fb.chunk.js","mappings":"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","sources":["components/Section/Section.jsx","components/ContactsList/ContactsList.jsx","components/FilterContact/FilterContact.jsx","components/Loading/Loading.jsx","components/FormAddContact/FormAddContact.jsx","components/AddContact/AddContact.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Heading, Box } from '@chakra-ui/react';\n\nconst Section = props => {\n  const { title, children } = props;\n  return (\n    <Box w={[320, 420, 800]} p=\"20px\">\n      <Heading\n        as=\"h2\"\n        bgGradient=\"linear(to-l, #4FD1C5, #234E52)\"\n        bgClip=\"text\"\n        fontSize={{ base: '24px', md: '28px', lg: '36px' }}\n      >\n        {title}\n      </Heading>\n      {children}\n    </Box>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.element),\n    PropTypes.element,\n  ]),\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux/es';\nimport { removeContact } from 'redux/operationPhonebook';\nimport {\n  List,\n  Heading,\n  ListItem,\n  ListIcon,\n  Button,\n  Text,\n  Flex,\n  Spacer,\n} from '@chakra-ui/react';\nimport { PhoneIcon } from '@chakra-ui/icons';\n\nconst ContactsList = props => {\n  const { contacts } = props;\n  return contacts.length > 0 ? (\n    <List\n      spacing={3}\n      marginTop=\"20px\"\n      fontSize={{ base: '16px', sm: '24px', lg: '28px' }}\n      textAlign=\"start\"\n    >\n      {contacts.map(elem => (\n        <Contact\n          name={elem.name}\n          phone={elem.number}\n          id={elem.id}\n          key={elem.id}\n        />\n      ))}\n    </List>\n  ) : (\n    <>\n      <Heading as=\"h4\" size=\"md\" color=\"red.400\">\n        \"There is no contacts\"\n      </Heading>\n    </>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        phone: PropTypes.string,\n        id: PropTypes.string,\n      }),\n      PropTypes.array\n    ),\n  ]),\n};\n\nconst Contact = props => {\n  const { name, phone, id } = props;\n\n  const dispatch = useDispatch();\n\n  const contactToRemove = event => {\n    dispatch(removeContact(event.target.id));\n  };\n\n  return (\n    <ListItem>\n      <Flex>\n        <Text noOfLines={1}>\n          <ListIcon as={PhoneIcon} color=\"teal.500\" marginRight=\"15px\" />\n          {name}: <span>{phone}</span>\n        </Text>\n        <Spacer />\n        <Button\n          colorScheme=\"teal\"\n          size=\"xs\"\n          display=\"inline-block\"\n          marginLeft=\"5px\"\n          type=\"button\"\n          id={id}\n          onClick={contactToRemove}\n        >\n          Delete\n        </Button>\n      </Flex>\n    </ListItem>\n  );\n};\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default ContactsList;\n","// import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { findContact } from 'redux/phonebookSlice';\nimport { Input, FormControl, FormLabel, VStack } from '@chakra-ui/react';\nimport { Formik, Form, Field } from 'formik';\n\nconst FilterContact = props => {\n  const findState = useSelector(state => state.phonebook.filter);\n  const dispatch = useDispatch();\n\n  const filterFun = event => {\n    dispatch(findContact(event.target.value.trim().toLowerCase()));\n  };\n  return (\n    <Formik\n      initialValues={{\n        filter: '',\n      }}\n      onSubmit={(values, actions) => {\n        actions.setSubmitting(false);\n      }}\n    >\n      <Form>\n        <VStack\n          spacing={6}\n          align=\"flex-start\"\n          w={[250, 400, 600]}\n          mx=\"auto\"\n          py=\"20px\"\n        >\n          <FormControl>\n            <FormLabel htmlFor=\"filter\">Find contacts by name</FormLabel>\n            <Input\n              as={Field}\n              variant=\"outline\"\n              focusBorderColor=\"teal.400\"\n              type=\"text\"\n              name=\"filter\"\n              onChange={filterFun}\n              value={findState}\n            />\n          </FormControl>\n        </VStack>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default FilterContact;\n","import { Spinner } from '@chakra-ui/react';\n\nconst Loading = () => {\n  return (\n    <Spinner\n      thickness=\"4px\"\n      speed=\"0.65s\"\n      emptyColor=\"gray.200\"\n      color=\"blue.500\"\n      size=\"xl\"\n    />\n  );\n};\n\nexport default Loading;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operationPhonebook';\n\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Input,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  VStack,\n  Button,\n} from '@chakra-ui/react';\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n\n  number: Yup.mixed().test({\n    name: 'number',\n    message:\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n    test: value => {\n      return /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/.test(\n        value\n      );\n    },\n  }),\n});\n\nconst FormAddContact = props => {\n  const dispatch = useDispatch();\n  const contactsState = useSelector(state => state.phonebook.contacts);\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          name: ``,\n          number: ``,\n        }}\n        validationSchema={SignupSchema}\n        onSubmit={(values, actions) => {\n          actions.setSubmitting(false);\n          actions.resetForm();\n\n          if (contactsState.find(elem => elem.name === values.name.trim())) {\n            alert('You have this contacts');\n            return;\n          }\n          dispatch(\n            addContact({\n              name: values.name.trim(),\n              number: values.number.trim(),\n            })\n          );\n        }}\n      >\n        {props => (\n          <Form>\n            <VStack\n              spacing={6}\n              align=\"flex-start\"\n              w={[250, 350, 550]}\n              mx=\"auto\"\n            >\n              <FormControl>\n                <FormLabel htmlFor=\"name\">Name</FormLabel>\n                <Input\n                  as={Field}\n                  variant=\"outline\"\n                  focusBorderColor=\"teal.400\"\n                  type=\"text\"\n                  name=\"name\"\n                />\n                {props.errors.name && (\n                  <FormErrorMessage id=\"feedback\">\n                    {props.errors.name}\n                  </FormErrorMessage>\n                )}\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"number\">Number</FormLabel>\n                <Input\n                  as={Field}\n                  variant=\"outline\"\n                  focusBorderColor=\"teal.400\"\n                  type=\"tel\"\n                  name=\"number\"\n                />\n                {props.errors.number && (\n                  <FormErrorMessage id=\"feedback\">\n                    {props.errors.number}\n                  </FormErrorMessage>\n                )}\n              </FormControl>\n            </VStack>\n\n            <Button\n              type=\"submit\"\n              colorScheme=\"teal\"\n              _hover={{ bg: 'gray', color: 'white' }}\n              marginTop=\"30px\"\n            >\n              Add contact\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default FormAddContact;\n","import {\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  AccordionIcon,\n  Box,\n} from '@chakra-ui/react';\nimport FormAddContact from 'components/FormAddContact/FormAddContact';\n\nexport const AddContact = () => {\n  return (\n    <Accordion defaultIndex={[1]} allowToggle>\n      <AccordionItem>\n        <h2>\n          <AccordionButton>\n            <Box\n              as=\"span\"\n              flex=\"1\"\n              textAlign=\"center\"\n              fontSize=\"24px\"\n              bgGradient=\"linear(to-l, #4FD1C5, #234E52)\"\n              bgClip=\"text\"\n            >\n              Add contact\n            </Box>\n            <AccordionIcon />\n          </AccordionButton>\n        </h2>\n        <AccordionPanel>\n          <FormAddContact />\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/operationPhonebook';\nimport { VStack } from '@chakra-ui/react';\n\nimport Section from 'components/Section/Section';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport FilterContact from 'components/FilterContact/FilterContact';\nimport Loading from 'components/Loading/Loading';\nimport { AddContact } from 'components/AddContact/AddContact';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const userState = useSelector(state => state.phonebook.user);\n\n  useEffect(() => {\n    if (userState) {\n      dispatch(getContacts());\n    }\n  }, [dispatch, userState]);\n\n  const contactsState = useSelector(state => state.phonebook.contacts);\n  const filterContacts = useSelector(state => state.phonebook.filter);\n  const isLoading = useSelector(state => state.phonebook.isLoading);\n\n  const contactToFind = contactsState.filter(elem =>\n    elem.name.toLowerCase().includes(filterContacts)\n  );\n\n  return (\n    <VStack>\n      <Section>\n        <AddContact />\n      </Section>\n      <Section title={'Contacts'}>\n        <FilterContact />\n        {isLoading ? <Loading /> : <ContactsList contacts={contactToFind} />}\n      </Section>\n    </VStack>\n  );\n};\nexport default Contacts;\n"],"names":["props","title","children","w","p","as","bgGradient","bgClip","fontSize","base","md","lg","Contact","name","phone","id","dispatch","useDispatch","noOfLines","PhoneIcon","color","marginRight","colorScheme","size","display","marginLeft","type","onClick","event","removeContact","target","contacts","length","spacing","marginTop","sm","textAlign","map","elem","number","findState","useSelector","state","phonebook","filter","initialValues","onSubmit","values","actions","setSubmitting","align","mx","py","htmlFor","I","Field","variant","focusBorderColor","onChange","findContact","value","trim","toLowerCase","thickness","speed","emptyColor","SignupSchema","Yup","shape","matches","required","test","message","contactsState","validationSchema","resetForm","find","alert","addContact","errors","_hover","bg","AddContact","defaultIndex","allowToggle","flex","userState","user","useEffect","getContacts","filterContacts","isLoading","contactToFind","includes","Section"],"sourceRoot":""}